WELCOME TO R.I.P.O.

Requirements:
	Python 2.7.6 or later
	CMake 3.12 or later

1- DOWNLOAD EVREYTHING YOU NEED:
- Download CMake
	- Transfer the "bin", "doc", "man" and "share" folders inside a new folder called CMake 
 		at the same level as "Compiler"

- Download ogre-1.11.15
	- Transfer it inside Dependencies

- Download PhysX from github: clone this repository https://github.com/NVIDIAGameWorks/PhysX
	- Transfer folder "physx" to Dependencies
	- Open file physx/buildtools/presets/public/vc15win32.xml
		- Make sure param NV_USE_STATIC_WINCRT (line 8) equals "False":
			<cmakeSwitch name="NV_USE_STATIC_WINCRT" value="False" comment="Use the statically linked windows CRT" />
	- Change directory to physx/, run ./generate_projects.[bat|sh]
		This will let you select a platform specific solution to build. You can then open the generated 
		solution file with your IDE and kick off one or more configuration builds.
		*Build for vc15win32*

- Download OIS from: https://sourceforge.net/projects/wgois/
	- Paste it to Dependencies folder

- Download CEGUI-0.8.7
	- Transfer it to Dependencies
- Download its dependencies:
	- cegui-cegui-dependencies-0ecdf3a9e49b
	- Transfer them to Dependencies
	- CMake them
	- Transfer the floder dependencies that has been created in Build to Dependencies/cegui-0.8.7
	- CMake CEGUI (you will have to set the paths for OGRE_HOME and OIS_HOME)
		- What is important is that you check the OgreRenderer box, you need that project later
	- Compile the Visual Studio Solution in Release and Debug
	- Transfer the dlls that are required into the folder Exes
		pcre_d.dll / pcre.dll
		freetype_d.dll / freetype.dll
		libexpat_d.dll / libexpat.dll
		CEGUIOgreRenderer-0.dll
		CEGUIBase-0.dll

2- OPEN THE "Native Tools Command Prompt" of Visual Studio
- cd into the folder "Compiler"

- write "gradlew compileCmake" -> this will generate the libraries with CMake
	IF FOR ANY REASON CMAKE DOESN'T WORK, IT'S BECAUSE IT'S NOT FINDING THE PATHS IN YOUR COMPUTER.
	YOU WILL HAVE TO SET THEM MANUALLY, SORRY.

- write "gradlew compileLib" -> this will compile the libraries and move the dlls to their folders





